name: Update app version in Renovate Branches

on:
  push:
    branches: [ 'renovate/*' ]
  workflow_dispatch:
    inputs:
      manual-trigger:
        description: 'Manually trigger Renovate'
        default: ''

jobs:
  update-app-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git
        run: |
          git config --local user.email "githubaction@githubaction.com"
          git config --local user.name "github-action update-app-version"

      - name: Get list of updated files by the last commit
        id: updated-files
        run: |
          echo "files=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | tr '\n' ' ')" >> $GITHUB_OUTPUT

      - name: Run renovate-app-version.sh on updated files
        id: rename
        run: |
          chmod +x .github/workflows/renovate-app-version.sh

          files="${{ steps.updated-files.outputs.files }}"
          for file in $files; do
            if [[ $file == *"docker-compose.yml"* ]]; then
              app_name=$(echo $file | cut -d'/' -f 2)
              old_version=$(echo $file | cut -d'/' -f 3)

              # Extract version from image (first service)
              service=$(yq '.services | keys | .[0]' $file)
              image=$(yq ".services.${service}.image" $file)

              if [[ "$image" == *":"* ]]; then
                new_version=$(cut -d ":" -f2- <<< "$image")
                trimmed_version=${new_version/#"v"}
              else
                trimmed_version=""
              fi

              echo "app_name=$app_name" >> $GITHUB_OUTPUT
              echo "old_version=$old_version" >> $GITHUB_OUTPUT
              echo "new_version=$trimmed_version" >> $GITHUB_OUTPUT

              .github/workflows/renovate-app-version.sh $app_name $old_version
            fi
          done

      - name: Commit & Push Changes
        run: |
          app_name="${{ steps.rename.outputs.app_name }}"
          old_version="${{ steps.rename.outputs.old_version }}"
          new_version="${{ steps.rename.outputs.new_version }}"

          if [[ -n "$app_name" && -n "$new_version" ]]; then
            git add "apps/$app_name/*"
            git commit -m "📈将应用 $app_name 的版本从 $old_version 升级到 $new_version [skip ci]" --no-verify || echo "无内容可提交"
            git push
          fi

      - name: Try auto-merge PR after version bump
        if: github.ref_name != 'main'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          branch_name=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: $branch_name"

          # 合并主分支以避免 not mergeable
          git fetch origin main
          git merge origin/main --no-edit || git rebase origin/main
          git push origin "$branch_name"

          # 获取 PR 编号
          pr_number=$(gh pr list --state open --head "$branch_name" --json number -q '.[0].number')
          if [ -z "$pr_number" ]; then
            echo "No PR found for branch $branch_name"
            exit 0
          fi

          echo "Found PR #$pr_number, checking mergeability..."

          # 等待 PR 可合并状态（最多重试 10 次）
          for i in {1..10}; do
            is_mergeable=$(gh pr view "$pr_number" --json mergeable -q '.mergeable')
            echo "Mergeable status: $is_mergeable"
            if [ "$is_mergeable" == "MERGEABLE" ]; then
              break
            fi
            echo "PR not mergeable yet, retrying in 5s... ($i/10)"
            sleep 5
          done

          # 再次检查并尝试合并
          is_mergeable=$(gh pr view "$pr_number" --json mergeable -q '.mergeable')
          if [ "$is_mergeable" == "MERGEABLE" ]; then
            echo "PR is mergeable now, merging..."
            gh pr merge "$pr_number" --merge --delete-branch --admin
          else
            echo "PR is still not mergeable, skipping merge."
          fi


